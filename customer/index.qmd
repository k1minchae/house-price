---
title: "고객 응대자료"
format: 
  dashboard: 
    scrolling: true
    orientation: rows
  

---


# 특정 동네를 선호하는 고객 유형

<p style="font-size: 2.5rem; font-weight: bold; text-align: center;">  특정 동네를 선호하는 고객을 위한 익스테리어 안내 매뉴얼</p>

## Row

### Column

<p style="font-size:22px; font-weight: bold;"> 외관 변수 선택</p>

| Variable     | Chi² Statistic | p-value         | DoF |
|--------------|----------------|------------------|---------------------|
| HouseStyle   | 1644.25        | 6.192×10⁻²³⁷     | 175                 |
| Exterior1st  | 3550.11        | 0                | 350                 |
| RoofStyle    | 760.67         | 9.530×10⁻⁹²      | 125                 |

→ 지역에 따라 선호되는 스타일, 외장재, 지붕 유형에 차이가 있음

## Row

### Column {.tabset}

#### 외장재

#####

```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as mpl

# 한글 폰트 설정 (예: 맑은 고딕)
plt.rcParams['font.family'] ='Malgun Gothic'
plt.rcParams['axes.unicode_minus'] =False

df = pd.read_csv("../ames_cleaned.csv")

# 2. Neighborhood별 평균 SalePrice 계산
nbhd_price = df.groupby("Neighborhood")["SalePrice"].mean()

# 3. 중간값(median)을 기준으로 고가/저가 구분
price_median = nbhd_price.median()
high_price_nbhd = nbhd_price[nbhd_price >= price_median].index
low_price_nbhd = nbhd_price[nbhd_price < price_median].index

# 4. 외장재 비율 계산 (Neighborhood별 비율 → 평균)
# → 범주형 비율 테이블을 먼저 만들고 그룹 평균
exterior_ratio = pd.crosstab(df["Neighborhood"], df["Exterior1st"], normalize="index")

# 5. 고가/저가 그룹 평균 비율 계산
high_group_avg = exterior_ratio.loc[high_price_nbhd].mean()
low_group_avg = exterior_ratio.loc[low_price_nbhd].mean()

# 6. 데이터프레임 형태로 변환 + 정렬 기준 추가
compare_df = pd.DataFrame(
    {
        "Exterior": high_group_avg.index,
        "고가 지역": high_group_avg.values,
        "저가 지역": low_group_avg.values,
    }
)

# 👉 전체 사용량 기준 정렬 (고가+저가 평균의 합)
compare_df["Total"] = compare_df["고가 지역"] + compare_df["저가 지역"]
compare_df = compare_df.sort_values("Total", ascending=False)  # 많이 쓰인 순서대로

# 7. 시각_=화
# _ = plt.figure(figsize=(16, 6))
_ = (
    compare_df.drop(columns="Total")
    .set_index("Exterior")
    .plot(kind="bar", figsize=(16, 6))
)
_ = plt.title("고가 vs 저가 지역 Exterior 비율 비교 (사용량 순 정렬)")
_ = plt.ylabel("평균 비율")
_ = plt.xlabel("Exterior1st")
_ = plt.xticks(rotation=45)
_ = plt.legend(title="지역 그룹")
_ = plt.tight_layout()
plt.show()


```

#####

| **외장재**     | **고가 지역 비율**       | **저가 지역 비율** | **기존 인식 (건축/부동산 일반)**                    | **해석 요약**                                               |
| ----------- | ------------------ | ------------ | ---------------------------------------- | ------------------------------------------------------- |
| **VinylSd** | **매우 높음** (약 0.43) | 낮음 (약 0.24)  | 원래는 **저가형 외장재**로 분류플라스틱 기반, 시공 쉬움, 비용 저렴 | 최근에는 **가성비 좋고 깔끔한 외관**으로 고급 신축 단지에도 널리 사용됨**트렌드 변화 반영** |
| **Wd Sdng** | 비슷                 | 비슷           | 전통적 주택에 많음고급 단독주택 외관으로도 사용되나**유지비 높음**   | 데이터와 인식 모두 혼합적**오래된 고급 or 전통적 스타일 주택**에서 사용된 흔적         |
| **HdBoard** | 낮음                 | 높음           | **저렴한 외장재**로 분류합판 기반으로 내구성 떨어짐           | 데이터와 인식 일치**비용 절감을 위한 선택지**                             |
| **MetalSd** | 낮음                 | 높음           | 방화성·내구성은 좋으나**디자인 선호도 낮고 저렴해 보임**        | **산업적 느낌** 혹은 리모델링 최소화 지역에 많음                           |
| **Plywood** | 낮음                 | 높음           | **가장 저렴한 외장재 중 하나**임시 주택 또는 낡은 단독주택용     | 데이터와 전형적 인식 완벽히 일치                                      |
| **CemntBd** | 중간                 | 낮음           | **고급 리모델링용 외장재**로 인식내구성 높고 다양한 마감 표현 가능  |  **고급 주택 또는 리모델링 지역**에서 인기                              |

#### 집 스타일

#####

```{python}

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib as mpl

# 한글 폰트 설정 (Windows 기준)
plt.rcParams["font.family"] = "Malgun Gothic"
plt.rcParams["axes.unicode_minus"] = False

# 데이터 불러오기
df = pd.read_csv("../ames_cleaned.csv")

# 1. Neighborhood별 HouseStyle 비율 테이블 생성
style_ratio = pd.crosstab(df["Neighborhood"], df["HouseStyle"], normalize="index")

# 2. 누적 막대 그래프를 위한 데이터프레임 정렬
style_ratio = style_ratio.loc[
    style_ratio.sum(axis=1).sort_values(ascending=False).index
]

# 3. 시각화: 누적 막대그래프
style_ratio.plot(
    kind="bar", stacked=True, figsize=(16, 8), colormap="tab20"  # 색상 다양화
)

_ = plt.title("Neighborhood별 HouseStyle 구성 비율 (누적 막대)")
_ = plt.xlabel("Neighborhood")
_ = plt.ylabel("비율")
_ = plt.xticks(rotation=45)
plt.legend(title="HouseStyle", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()

```

#####

| **구분**            | **동네 예시**                                        | **해석**                         |
| ----------------- | ------------------------------------------------ | ------------------------------ |
| **단층 주택 중심 지역**   | Blmngtn, Timber, StoneBr, Greens, NAmes, Veenker | 넓은 평면 구조, 리모델링·시니어 가구에 유리      |
| **2층 주택 중심 지역**   | BrDale, NoRidge, Somerst, MeadowV, NPkVill       | 신축 또는 실용적 설계, 가족 단위 거주 적합      |
| **혼합형 다양성 높은 지역** | OldTown, IDOTRR, SWISU                           | 전통 주택 + 개보수된 주택 공존, 가격 편차 큼    |
| **특정 스타일 몰림 지역**  | BrkSide (1.5Fin), StoneBr (1Story)               | 디자인/건설 시기 따라 **스타일 집중도 매우 높음** |


#### 지붕 유형

#####

```{python}


# 한글 폰트 설정
plt.rcParams["font.family"] = "Malgun Gothic"  # Windows
# plt.rcParams["font.family"] = "AppleGothic"  # macOS
plt.rcParams["axes.unicode_minus"] = False

# 데이터 불러오기
df = pd.read_csv("../ames_cleaned.csv")

# 1. Neighborhood별 RoofStyle 비율 테이블 생성
roof_ratio = pd.crosstab(df["Neighborhood"], df["RoofStyle"], normalize="index")

# 2. 시각화 전 정렬 (선택사항)
roof_ratio = roof_ratio.loc[roof_ratio.sum(axis=1).sort_values(ascending=False).index]

# 3. 누적 막대그래프 시각화
roof_ratio.plot(kind="bar", stacked=True, figsize=(16, 8), colormap="tab20")

_=plt.title("Neighborhood별 RoofStyle 구성 비율 (누적 막대)")
_=plt.xlabel("Neighborhood")
_=plt.ylabel("비율")
_=plt.xticks(rotation=45)
plt.legend(title="RoofStyle", bbox_to_anchor=(1.05, 1), loc="upper left")
plt.tight_layout()
plt.show()


```

#####

|        **해석**        |
|:----------------------:|
| Ames 시에서는 전통적이고 안정적인 형태인 **Gable 지붕**이 가장 널리 쓰임. |



## Row

### Column {.tabset}

#### 추천 하는 외장재

#####

<div style="display: flex; overflow-x: auto; gap: 10px;">
| 외장재 이미지 | **외장재** | **추천 멘트 (간단 설명)** |
|:------------:|:-----------:|----------------------------|
| <img src="../hansl/vinylsd.png" alt="비닐사이딩" height="100"/> | **Vinyl Siding** (비닐사이딩) | 깔끔하고 관리가 쉬워서 요즘 제일 많이 써요. 가성비도 좋아요. |
| <img src="../hansl/polywood.png" alt="합판 외장재" height="100"/> | **Plywood** (합판 외장재) | 비용을 최소화할 때 많이 써요. 간단한 리모델링에 적합해요. |


</div>

#####

<div style="display: flex; overflow-x: auto; gap: 10px;">
| 외장재 이미지 | **외장재** | **추천 멘트 (간단 설명)** |
|:------------:|:-----------:|----------------------------|
| <img src="../hansl/metalSd.png" alt="금속사이딩" height="100"/> | **Metal Siding** (금속사이딩) | 튼튼하고 방수·방화에 강해요. 모던한 느낌도 있어요. |
| <img src="../hansl/cement.png" alt="시멘트보드" height="100"/> | **Cement Board** (시멘트보드) | 고급 리모델링에 많이 써요. 튼튼하고 외관도 세련돼요. |


</div>

## Row

#####

![](../hansl/1F.png)

<br>

고객: “단층 구조가 좋긴 한데 너무 오래된 집은 싫어요.”<br>
→ “그럼 Timber나 StoneBr처럼 단층이 많고도 최근 리모델링이 활발한 동네를 고려해보세요.”

#####

![](../hansl/2F.png)

<br>

고객: “신축형 2층 주택 위주 단지 같은 곳 있어요?”<br>
→ “NoRidge나 Somerst가 대표적이에요. 스타일도 거의 통일돼 있고 고급스러워요.”

## Row

#####

![](../hansl/roof.png)

<br>

고객: “제일 많이 쓰는 지붕 형태는 무엇인가요?”<br>
→ “Ames 시에서는 대부분의 주택이 Gable(박공지붕) 스타일을 사용하고 있어요. 가장 흔하면서도 안정적인 형태죠.”

#### 

<p style="font-size:22px; font-weight: bold;">인테리어 고객 응대 요약표</p>


| **구분**           | **동네 유형**          | **대표 지역**                          | **고객 특성**                    | **말 꺼내는 팁**                                 |
| ---------------- | ------------------ | ---------------------------------- | ---------------------------- | ------------------------------------------- |
| **1. 통일된 스타일**   | 디자인 통일감 있는 단지형 주거지 | MeadowV, Greens, Landmrk           | 색감 & 마감재 통일 선호 / 조화로운 외관 추구 | “전체적으로 색감과 외장재가 통일돼서, 인테리어도 흐름 맞추면 훨씬 멋져요.” |
| **2. 고급 커스터마이징** | 개성 있는 고급 외장재 혼합    | NoRidge, StoneBr, NridgHt          | 고급소재 선호 / 외장재 변경/커스터마이징 희망  | “이 지역은 고급 외장재가 다양해서 리모델링 자유도가 정말 높아요.”      |
| **3. 단층 구조 중심**  | 심플한 1층 주택 위주       | StoneBr, Veenker, Timber, Blmngtn  | 실내 동선 중시 / 개방형 구조 리모델링 희망   | “1층 구조라 구조변경이 자유롭고, 최근 리모델링 수요도 많아요.”       |
| **4. 스타일 분산형**   | 자유도 높은 혼합형 지역      | Gilbert, ClearCr, Crawfor, Somerst | 창의적 외관 디자인• 직접 스타일링 지향     | “외장재나 구조 변경에 제약이 적어, 원하는 스타일로 바꾸기 좋아요.”     |




# 가성비 추구 고객 유형

<p style="font-size: 2.5rem; font-weight: bold; text-align: center;">가성비 집을 추구하는 고객을 응대하는 매뉴얼</p>

## 
- 고객 유형 : **1인 가정**, **2인 가정**, **자녀 동반 가정**
- 평가 기준 : **면적, 주택 등급, 건축 연도, 냉난방, 차고 수용 능력, 방 개수** 
- 고객 유형마다 각 항목을 **5점 척도**로 평가 후 유형 별 최종 평균 점수로 변환하여 **가성비 top5** 출력 

##
<p style="font-size:22px; font-weight: bold;">면적</p>
- 전체 부지 (LotArea) - 1층 면적 (1stFlrSF) = 마당 면적 
-> 자녀 동반 가정에 가중치 부여  
- 집값 SalePrice /실내 전체 면적 (GrLivArea) 으로 면적 당 집값 
- 분위수로 5구간을 나눠 값이 가장 낮은 5점부터 1점까지 

##
<p style="font-size:22px; font-weight: bold;">주택 등급 (OeverallCond)</p>

- 10~9 : 5점 , 8~7 : 4점 , 6~5 : 3점 , 4~3 : 2점 , 2~1 : 1점

## 
<p style="font-size:22px; font-weight: bold;">건축 연도 (YearRemodAdd , YearBuilt)</p>

- 리모델링과 건축 연도를 같이 고려 
- 리모델링 : 건축 5년 이내에 시행하는 리모델링 공사는 하자보수 공사로 취급
- 연도 범위를 5개로 나누고 최신 집일 수록 5점부터 부여 

##
<p style="font-size:22px; font-weight: bold;">냉난방 (CentralAir , heatingQC)</p>

- CentralAir = Y 값만 필터링 
- Ames에는 추운 날이 많아 난방이 중요 
- Excellent : 5점 Good : 4점, Typical Average: 3점 , Fair : 2점 , Poor : 1점 

##
<p style="font-size:22px; font-weight: bold;">차고 수용 능력 (GarageCars)</p>

- 기후로부터 보호, 차량 도난, 파손등의 범죄를 막는 안전 공간 역할
- 1인 가정은 0 ~ 1대를 5점, 2인 가정은 1~2대를 5점, 자녀 동반 가정을 1~2대를 5점으로 부여

##
<p style="font-size:22px; font-weight: bold;">방 개수  (TotRmsAbvGrd)</p>

- 화장실, 욕실, 침실, 개인 방, 자녀 방 ...
- 1인 가정 : 3~4개, 2인 가정 : 5~6개 , 자녀 동반 가정 : 7~8개 를 5점으로 부여

## 1인 가구 top5
<p style="font-size:22px; font-weight: bold;">1인 가정 Top5  </p>

## 

```{python}
from IPython.display import IFrame
IFrame(src='../assets/map1_single_top5(1).html', width='100%', height='600px')
```

## 2인 가구 top5
<p style="font-size:22px; font-weight: bold;">2인 가정 Top5  </p>

##
```{python}
from IPython.display import IFrame
IFrame(src='../assets/map_couple_top5.html', width='100%', height='600px')
```

## 자녀 있는 가족 top5 
<p style="font-size:22px; font-weight: bold;">자녀 동반 가정 Top5 </p>

##
```{python}
from IPython.display import IFrame
IFrame(src='../assets/map_family_top5.html', width='100%', height='600px')
```



# 리모델링 고객 유형

## Row

<p style="font-size: 2.5rem; font-weight: bold; text-align: center;">주택 판매 전 리모델링을 고려하는 고객을 응대하기 전 참고할 것</p>

## Row


### Column

#### Row

<p style="font-size:22px; font-weight: bold;">리모델링의 기준</p>

- 우리 부동산은 건축 **5년 이내**에 시행하는 리모델링 공사는 **하자보수** 공사로 취급합니다.
- 5년이 지난 건축물에 대해 공사를 진행하는 경우 리모델링으로 판단합니다.
- **하자보수**는 건축 후 **1년차**에 가장 많이 발생합니다.

#### Row

```{python}
import pandas as pd
df = pd.read_csv('../ames_cleaned.csv')
df = df[df['YearRemodAdd'] >= df['YearBuilt']]
df['diff'] = df['YearRemodAdd'] - df['YearBuilt'] # 리모델링 연도 - 지어진 연도
not_remodel = df[df['diff'] <= 5] # 1735 개
remodel = df[df['diff'] > 5] # 771 개

import matplotlib.pyplot as plt
_ = plt.rcParams['font.family'] ='Malgun Gothic'
_ = plt.rcParams['axes.unicode_minus'] =False

# 하자보수 기간
# 5년이하는 시공 하자보수 기간으로 판단
_ = plt.figure(figsize=(6, 3))
apt_refactor = not_remodel.loc[(not_remodel['diff'] <= 5) & (not_remodel['diff'] > 0), :]
_ = plt.hist(apt_refactor['diff'], bins=9, color='skyblue', alpha=0.7)
_ = plt.title('연식')
_ = plt.xlabel('연식')
_ = plt.xticks([1, 2, 3, 4, 5])
_ = plt.ylabel('빈도수')
plt.show()

```


### Column 

#### Row {.tabset}

##### 이상치 제거 전

::::{.Rows}

:::{.Row}

<p style="font-size:22px; font-weight: bold;">리모델링 전 후 비교</p>

```{python}
# 리모델링 여부에 따른 주택 판매 가격 비교 (박스플롯)
import seaborn as sns
# 두 그룹에 구분 컬럼 추가
remodel['리모델링'] = 'O'
not_remodel['리모델링'] = 'X'

# 데이터 합치기
combined = pd.concat([remodel, not_remodel])

# 이상치 보기
# 리모델링 여부 그룹 설정
grouped = combined.groupby('리모델링')

# 이상치 판별 결과 저장용 리스트
outliers_list = []

# 각 그룹별로 이상치 추출
for label, group in grouped:
    q1 = group['SalePrice'].quantile(0.25)
    q3 = group['SalePrice'].quantile(0.75)
    iqr = q3 - q1

    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr

    outliers = group[(group['SalePrice'] < lower_bound) | (group['SalePrice'] > upper_bound)]
    outliers_list.append(outliers)

# 결과 통합
outliers_df = pd.concat(outliers_list)

# 이상치 개수
outliner_cnt_X = outliers_df['리모델링'].value_counts()['X']
outliner_ratio_X = (outliner_cnt_X / len(not_remodel)) * 100
outliner_cnt_O = outliers_df['리모델링'].value_counts()['O']
outliner_ratio_O = (outliner_cnt_O / len(remodel)) * 100

# 박스플롯 그리기
_= plt.figure(figsize=(8, 6))
sns.boxplot(data=combined, x='리모델링', y='SalePrice', palette='pastel')
_= plt.title("리모델링 여부에 따른 주택 판매 가격 비교")
_= plt.xlabel("리모델링 여부")
_= plt.text(0, 430000, f'이상치: {outliner_cnt_X}개 {outliner_ratio_X:.2f}%', fontsize=12, color='red')
_= plt.text(1, 500000, f'이상치: {outliner_cnt_O}개 {outliner_ratio_O:.2f}%', fontsize=12, color='red')
_= plt.ylabel("주택 가격")
_= plt.grid(True, alpha=0.3)
plt.show()

```

:::


:::{.Row}

<br>

- 우리 신입사원은 아직 특수 주택보다 **일반적인 주택을 상담**하는 경우가 많으므로
- 가격대가 **너무 낮거나, 너무 높은** 주택은 이상치로 취급하고 **제거**하겠습니다.

:::
::::

##### 이상치 제거 후

::::{.Rows}

<p style="font-size:22px; font-weight: bold;">리모델링 전 후 비교</p>


```{python}

# 이상치 제거한 데이터프레임 생성
# 신입사원이라 비싼 집은 안맡음
def remove_outliers_iqr(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

remod_cleaned = remove_outliers_iqr(remodel, 'SalePrice')
not_remodel_cleaned = remove_outliers_iqr(not_remodel, 'SalePrice')

# 다시 하나의 데이터프레임으로 합치기
df_cleaned = pd.concat([remod_cleaned, not_remodel_cleaned])

_=plt.figure(figsize=(8, 6))
sns.boxplot(data=df_cleaned, x='리모델링', y='SalePrice', palette='pastel')
_=plt.title("리모델링 여부에 따른 주택 판매 가격 비교")
_=plt.xlabel("리모델링 여부")
_=plt.ylabel("주택 가격")
_=plt.grid(True, alpha=0.3)
plt.show()

```

<br>

- 예상과 달리 **리모델링을 한 집이 가격대가 더 낮게 형성**되어 있습니다.
- 실제로 각 그룹간 가격대가 유의미하게 차이가 나는지를 검증해 보겠습니다.

::::

## Row

<p style="font-size:22px; font-weight: bold;">정규성 검정</p>

- 리모델링 유/무에 따라 주택 가격이 차이가 있는지 **통계적으로 검증하기 전에**
- 이상치를 제거한 **리모델링 O / 리모델링 X 그룹이 각각 정규성을 따르는 지를 확인**하겠습니다.

```{python}
# 정규성 검정
import matplotlib.pyplot as plt
import scipy.stats as stats

_=plt.figure(figsize=(12, 5))

# 리모델링 O
_=plt.subplot(1, 2, 1)
_=stats.probplot(remod_cleaned['SalePrice'], dist="norm", plot=plt)
_=plt.title("Q-Q Plot: 리모델링 O")

# 리모델링 X
_=plt.subplot(1, 2, 2)
_=stats.probplot(not_remodel_cleaned['SalePrice'], dist="norm", plot=plt)
_=plt.title("Q-Q Plot: 리모델링 X")

_=plt.tight_layout()
plt.show()
```


<p style="font-size:22px; font-weight: bold;">Anderson-Darling 정규성 검정 결과</p>

| 구분          | Statistic | 15.0% 유의수준 | 10.0% 유의수준 | 5.0% 유의수준 | 2.5% 유의수준 | 1.0% 유의수준 |
|---------------|-----------|----------------|----------------|----------------|----------------|----------------|
| 리모델링 O     | 3.1208    | 불만족         | 불만족         | 불만족         | 불만족         | 불만족         |
| 리모델링 X     | 21.1428   | 불만족         | 불만족         | 불만족         | 불만족         | 불만족         |


<br>

- 두 그룹 다 Q-Q Plot 으로 보기엔 얼추 정규성을 따르는 것 처럼 보이지만,
  
- <code style="color:red;">Anderson-Darling</code> 검정을 해본 결과 **정규성을 따르지 않음**을 알 수 있습니다.

<br>
<br>


<p style="font-size:22px; font-weight: bold;">비모수 검정 수행</p>

- 두 분포 다 **정규분포를 따르지 않기 때문에**
- 두 집단 간의 차이를 **비모수 검정**으로 확인하겠습니다.

<br>

<code style="color:red; font-size: 18px;">Mann-Whitney U 검정 통계량: 314837.0000, p-value: 0.0000</code>

- p-value 값이 매우 낮기 때문에 두 집단 간의 차이가 유의미함을 알 수 있습니다.


## Row


<p style="font-size: 2.5rem; font-weight: bold; text-align: center;">왜 리모델링을 한 주택의 가격이 더 낮을까요?</p>

## Row

::::{.columns}

:::{.column width=100%}
```{python}
# 지어진 연도 비교
_=plt.figure(figsize=(8, 6))
sns.boxplot(data=df_cleaned, x='리모델링', y='YearBuilt', palette='Set2')
_=plt.title("리모델링 여부에 따른 지어진 연도 비교")
_=plt.xlabel("리모델링 여부")
_=plt.ylabel("지어진 연도")
_=plt.grid(True, alpha=0.3)
plt.show()

```

:::

:::{.Column width=100%}

<br>
<br>


<p style="font-size:22px; font-weight: bold; text-align:center;">리모델링 된 주택이 오래된 주택이 많다.</p>

- 좌측의 박스 플롯을 보면 **리모델링을 안 한 주택**이 리모델링을 한 주택보다 **최근에 지어졌음**을 알 수 있다.
- 즉, **리모델링 된 주택이 좀 더 저렴한 이유는 오래된 주택이어서** 그랬을 가능성이 있다.
- 결국, 단순하게 리모델링 여부에 따라 주택 가격을 분류할 수는 없다.

<p style="font-size: 22px; font-weight: bold; text-align: center; color: #ef4444;">그렇다면 오래된 주택은 리모델링을 해서 판매하는 것이 더 유리할까?</p>

1. 건축 **연도별 주택 가격을 비교**해보고, 
2. **오래된 집에서의 리모델링 전후 가격을 비교**해보겠습니다.


:::

::::

## Row


<p style="font-size: 2.5rem; font-weight: bold; text-align: center;">건축 연도별 주택 가격 비교</p>


```{python}

# 지어진 연도에 따른 가격 차이 비교
# 연도별 평균 가격 계산
yearly_avg = df_cleaned.groupby('YearBuilt')['SalePrice'].mean().reset_index()

_=plt.figure(figsize=(12, 6))
_=sns.lineplot(data=yearly_avg, x='YearBuilt', y='SalePrice')
_=sns.lineplot()
_=plt.axvline(x=1950, color='red', linestyle='--', label='1950년')
_=plt.title('지어진 연도별 평균 주택 가격')
_=plt.xlabel('지어진 연도')
_=plt.ylabel('평균 가격')
_=plt.legend()
_=plt.grid(True, alpha=0.3)
plt.show()
```

<br>

- 지어진 연도가 **최근일수록 가격이 상승**하는 추세가 있습니다.
- 1950년대 이전은 **오래된 주택이라 변동폭이 큰 것**을 볼 수 있습니다.
- **1950년대 이전 주택끼리** 비교했을 때, **리모델링 유/무에 따라 가격이 달라지는지** 살펴보겠습니다.

### Column

```{python}
#|eval: true
#|echo: false
old_houses = df_cleaned.loc[df_cleaned['YearBuilt'] <= 1950, :]

# 이상치 보기
# 리모델링 O 그룹만 추출
remod_old = old_houses[old_houses['리모델링'] == 'O']

# 이상치 기준 계산 (IQR)
q1 = remod_old['SalePrice'].quantile(0.25)
q3 = remod_old['SalePrice'].quantile(0.75)
iqr = q3 - q1
upper_bound = q3 + 1.5 * iqr

# 이상치 추출
outliers = remod_old[remod_old['SalePrice'] > upper_bound]
n_outliers = len(outliers)
n_total = len(remod_old)
outlier_ratio = (n_outliers / n_total) * 100

# 시각화 (박스플롯)
import matplotlib.pyplot as plt
import seaborn as sns

_=plt.figure(figsize=(8, 6))
_=sns.boxplot(data=old_houses, x='리모델링', y='SalePrice', palette='pastel')
_=plt.title("오래된 주택 리모델링 여부에 따른 가격 비교")
_=plt.text(
    x=0, y=remod_old['SalePrice'].max()*0.95, 
    s=f"이상치: {n_outliers}개 ({outlier_ratio:.2f}%)", 
    color='red', fontsize=12
)
_=plt.ylabel("주택 판매 가격")
_=plt.grid(alpha=0.3)
_=plt.tight_layout()
plt.show()


```


<p style="font-size:22px; font-weight: bold; text-align:center;">오래된 주택은 리모델링 한 주택이 더 비쌀까?</p>

- Box Plot 을 그렸을 때 **리모델링 한 주택이 조금 더 비싼** 것을 알 수 있습니다.
- 하지만, 이는 우연히 그런건지 아니면 **통계적으로 유의미한 지** 확실히 알 수 없습니다.

<br>
<hr>

- 이를 확실히 하기 위해 **통계적 검정을 활용**해 보겠습니다.
- 정규성을 만족하지 않기에 **비모수 검정**을 진행하겠습니다.
- H0: 리모델링 유/무에 따라 주택 **가격 차이가 없다.**
- H1: 리모델링을 한 주택이 **가격이 더 높다. (단측검정)**

<code style="color: red; font-size:18px;">Mann-Whitney U 검정 통계량: 18992.5000, p-value: 0.0075</code>

- 비모수 검정을 진행했을 때 p-value 값이 낮으므로 **귀무가설을 기각**하고 대립가설을 채택할 수 있습니다.

<p style="font-size: 22px; font-weight: bold; text-align: center; color: #ef4444;">즉, 오래된 주택은 리모델링을 했을 때 가격이 더 높다는 것을 알 수 있습니다.</p>


## Row

<p style="font-size: 2rem; font-weight: bold;">결론</p>

<!-- <p style="font-size:22px; font-weight: bold;"></p> -->

📊 통계적으로는 리모델링을 한 주택이 **조금 더 높은 가격**에 거래되는 경향이 있었습니다.  
하지만 이는 어디까지나 **가격 측면에서의 경향성**일 뿐,  
실제 리모델링 시 발생하는 **공사 비용, 시간, 하자 가능성** 등을 고려해야 합니다.  

<br>

따라서 고객에게는 **현재 주택의 상태, 예산, 목적**에 따라  
리모델링 여부를 **함께 판단**할 수 있도록 도와주는 것이 더 적절합니다.








