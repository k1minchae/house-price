---
title: "신입 교육자료"
---

# 데이터 설명

<div style="max-height: 1000px !important; width:100% !important; display: flex !important; justify-content: space-around !important; flex-direction: row !important;">

<div style="overflow-y:auto; width:25%; height:100%;">
<h3>데이터 불러오기</h3>

```{python}
#|eval: true
#|echo: true
import pandas as pd

# 데이터 불러오기
load_df = pd.read_csv('../kaggle/ames.csv')
load_df.info(max_cols=0)
```

- 행(데이터)은 총 **2579개**
- 열(속성)은 총 **85개**로 이루어져있습니다.
- 즉, **집이 2579개** 있고 각각의 집을 나타내는 **속성이 85개**가 있습니다.

</div>

<div style="overflow:auto; width:30%; max-height:100%;">

<h3>결측치 확인</h3>

```{python}
#|eval: true
#|echo: false
print(load_df.isna().sum()[load_df.isna().sum() > 100])

```

- 결측치가 100개 이상인 컬럼만 필터링을 해보았습니다.
- 확인 결과 <strong>결측치가 상당히 많은</strong> 것을 알 수 있습니다.
- Kaggle Data 설명을 참고하여 <code style="color:red;">NaN</code>값이 왜이렇게 많은지 살펴봤더니, 


<p style="margin-bottom: 2rem;"><code style="color:red;">NaN</code>값이 **'없음'**을 나타내는 데이터가 많았습니다.</p>

| 영문 변수명        | 설명 (한글)             |
|-------------------|--------------------------|
| BsmtCond          | 지하실 상태              |
| BsmtFinType2      | 지하실 마감 공간 유형 2  |
| BsmtExposure      | 지하실 외부 노출 여부    |
| BsmtFinType1      | 지하실 마감 공간 유형 1  |
| FireplaceQu       | 벽난로 품질              |
| GarageType        | 차고 타입                |
| GarageFinish      | 차고 마감 상태           |
| GarageQual        | 차고 품질                |
| GarageCond        | 차고 상태                |
| PoolQC            | 수영장 품질              |
| MasVnrType        | 벽돌 베니어 유형         |
| Fence             | 울타리 품질              |
| MiscFeature       | 기타 부대시설            |
| Alley             | 골목 포장 상태           |
| BsmtQual          | 지하실 품질              |

- 위 표에 들어있는 데이터는 <code style="color:red;">NaN</code> 값이 **'없음'** 을 나타냅니다.
- 그래서, 저희는 해당 데이터를 결측치로 인식하지 않고 **'없다'라는 의미를 명확히** 하고자 했습니다.

<br>

<hr>

- 또한, 리모델링 연도가 건축 연도보다 빠른 경우가 있습니다.

```{python}
#| echo: true
#| eval: false
# 리모델링 연도가 지어진 연도보다 빠른 경우 결측치로 판단
df[df['YearRemodAdd'] < df['YearBuilt']] # 1개
```

- 저희는 해당 데이터를 정확하지 않다고 판단하여 제거했습니다.


</div>


<div style="overflow-y:auto; width:30%; max-height:100%; padding-left: 1rem;">
<h3>결측치 처리</h3>

```{python}
#|echo: true
#|eval: true
# Nan 이 없음 을 나타내는 컬럼들
nan_ = ['BsmtCond', 'BsmtFinType2', 'BsmtExposure',
        'BsmtFinType1', 'FireplaceQu', 'GarageType', 
        'GarageFinish', 'GarageQual', 'GarageCond',
        'PoolQC', 'MasVnrType', 'Fence', 'MiscFeature',
          'Alley', 'BsmtQual']

load_df['LotFrontage'].fillna(0, inplace=True)
load_df['GarageYrBlt'].fillna(0, inplace=True)

load_df[nan_] = load_df[nan_].fillna("없음")

# 결측치 재확인
print(load_df.isna().sum()[load_df.isna().sum() > 0])

```

- **'없음'**이라는 의미를 가진 데이터를 채우고 나니 결측치가 확연히 줄어든 것을 볼 수 있습니다.
- 하지만, 여전히 **위도와 경도**는 결측치가 많습니다.
- 주소는 있는데, **위도/경도 정보만 없는 데이터가 77개**가 있습니다.
- 저희는 이 데이터를 살리기 위해 주소를 통해 위도와 경도를 추출하기로 했습니다.


<hr />

```{python}
#|echo: true
#|eval: false
from geopy.geocoders import Nominatim
import time
geolocator = Nominatim(user_agent="ames_geocoder")

# 위도/경도 컬럼 생성
filtered['위도_보정'] = None
filtered['경도_보정'] = None

# 주소 기반 위도/경도 검색
find = 0
not_find = 0
for idx, row in filtered.iterrows():
    try:
        # 주소 + 도시 이름으로 검색 정확도 향상
        full_address = f"{row['Prop_Addr']}, Ames, Iowa"
        location = geolocator.geocode(full_address)

        # 주소 찾은 경우
        if location:
            filtered.at[idx, '위도_보정'] = location.latitude
            filtered.at[idx, '경도_보정'] = location.longitude
            print(f"[O] 주소 찾음: {full_address} → 위도: {location.latitude}, 경도: {location.longitude}")
            find += 1

        # 주소 못 찾은 경우
        else:
            print(f"[X] 주소 찾을 수 없음: {full_address}")
            not_find += 1

    except Exception as e:
        print(f"[!] 오류 발생 at {row['주소']} → {e}")
        not_find += 1
    time.sleep(1)  # API 과부하 방지

# 기존 df에 위도/경도 덮어쓰기
load_df.loc[filtered.index, 'Latitude'] = filtered['위도_보정']
load_df.loc[filtered.index, 'Longitude'] = filtered['경도_보정']

# 주소 찾은 개수: 42, 찾지 못한 개수: 35
print(f"주소 찾은 개수: {find}, 찾지 못한 개수: {not_find}")    
```

- <code style="color:red;">geopy.geocoders</code>는 주소를 위도/경도로 변환해주는 라이브러리 입니다.
- 지오코딩: 주소를 위도/경도로 변환
- 지오코딩을 가능하게 해주는 라이브러리 입니다.
- <code style="color:red;">pip install geopy</code> 를 통해 설치할 수 있습니다.
- 해당 라이브러리를 통해 42개의 데이터의 위도/경도 정보를 얻을 수 있었습니다.



</div>




</div>

## 2


# 3